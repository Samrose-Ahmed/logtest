name: suricata_eve
transform: |-
  .event.kind = "event"
  .event.category = ["network"]
  .destination.domain = []
  .related.hosts = []

  .event.original = encode_json(.json)
  .suricata.eve = object!(del(.json))

  .source.mac = del(.suricata.eve.ether.src_mac)
  if .source.mac != null {
    .source.mac = replace!(.source.mac, r'[-:.]', "-")
    # .source.mac = replace(.source.mac, r'(..)(?!$)', "$1-")
    .source.mac = upcase(.source.mac)
  }

  .destination.mac = del(.suricata.eve.ether.dest_mac)                                  
  if .destination.mac != null {
    .destination.mac = replace!(.destination.mac, r'[-:.]', "-")
    # .destination.mac = replace(.destination.mac, r'(..)(?!$)', "$1-")
    .destination.mac = upcase(.destination.mac)
  }
       
      
  .source.address = del(.suricata.eve.src_ip)

  if .source.address != null {
    .source.ip = to_string!(.source.address)
  }

  if .suricata.eve.src_port != null {
    .source.port = to_int!(.suricata.eve.src_port)
  }

  .destination.address = del(.suricata.eve.dest_ip)

  if .destination.address != null {
    .destination.ip = to_string!(.destination.address)
  }

  if .suricata.eve.dest_port != null {
    .destination.port = to_int!(.suricata.eve.dest_port)
  }

  .network.transport = del(.suricata.eve.proto)

  if .suricata.eve.flow_id != null {
    .suricata.eve.flow_id = to_string!(.suricata.eve.flow_id)
  }

  if .ts != null {                                           
    .event.created = to_timestamp!(.ts, "seconds") 
  }

  if .suricata.eve.timestamp != null {
    ts = string!(.suricata.eve.timestamp)
    if contains(slice!(ts, length(ts) - 6), "+") {
      ts = split(ts, "+")
      ts = join!([ts[0], "+", slice!(ts[1], 0,2), ":", slice!(ts[1], 2)])
    } else if contains(slice!(ts, length(ts) - 6), "-") {
      ts_suff = split(slice!(ts, length(ts) - 6), "-")
      ts = slice!(ts, 0, length(ts) - 6) + join!([ts_suff[0], "-", slice!(ts_suff[1], 0,2), ":", slice!(ts_suff[1], 2)])
    } else {
      ts = ts + "Z"
    }

    .ts = to_timestamp!(ts) 
  }

  # TODO(): add community network id, dns.question enrichment    

  .suricata.eve.event_type = downcase(.suricata.eve.event_type) ?? null

  event_mappings = {
    "alert": {
      "kind": "alert",
      "category": [
        "network",
        "intrusion_detection"
      ]
    },
    "dns": {
      "type": [
        "protocol"
      ],
      "network_protocol": "dns"
    },
    "flow": {
      "type": [
        "connection"
      ]
    },
    "ftp": {
      "type": [
        "protocol"
      ],
      "network_protocol": "ftp"
    },
    "ftp_data": {
      "type": [
        "protocol"
      ],
      "network_protocol": "ftp"
    },
    "http": {
      "category": [
        "network",
        "web"
      ],
      "type": [
        "access",
        "protocol"
      ],
      "network_protocol": "http"
    },
    "http2": {
      "category": [
        "network",
        "web"
      ],
      "type": [
        "access",
        "protocol"
      ],
      "network_protocol": "http"
    },
    "ikev2": {
      "type": [
        "protocol"
      ],
      "network_protocol": "ikev2"
    },
    "krb5": {
      "type": [
        "protocol"
      ],
      "network_protocol": "krb5"
    },
    "mqtt": {
      "type": [
        "protocol"
      ],
      "network_protocol": "mqtt"
    },
    "smb": {
      "type": [
        "protocol"
      ],
      "network_protocol": "smb"
    },
    "smtp": {
      "type": [
        "protocol"
      ],
      "network_protocol": "smtp"
    },
    "snmp": {
      "type": [
        "protocol"
      ],
      "network_protocol": "snmp"
    },
    "ssh": {
      "type": [
        "protocol"
      ],
      "network_protocol": "ssh"
    },
    "stats": {
      "kind": "metric"
    },
    "tftp": {
      "type": [
        "protocol"
      ],
      "network_protocol": "tftp"
    },
    "tls": {
      "type": [
        "protocol"
      ],
      "network_protocol": "tls"
    },
    "rdp": {
      "type": [
        "protocol"
      ],
      "network_protocol": "rdp"
    },
    "rfb": {
      "type": [
        "protocol"
      ],
      "network_protocol": "rdp"
    }
  }  
  info = object!(get!(event_mappings, [.suricata.eve.event_type]) || {})
  .network.protocol = del(info.network_protocol)   
  .event |= info 
  .event.type = array!(.event.type || [])              
      
  if .suricata.eve.app_proto != null {
      .suricata.eve.app_proto = downcase!(.suricata.eve.app_proto)
      if .suricata.eve.app_proto == "ftp-data" { 
          .network.protocol = "ftp"
      } else if .suricata.eve.app_proto != "failed" && .suricata.eve.app_proto != "template" && .suricata.eve.app_proto != "template-rust" { 
          .network.protocol = .suricata.eve.app_proto
      }
  }                     

  if .suricata.eve.event_type == "http" && .suricata.eve.http.status != null {
      .event.outcome = if int!(.suricata.eve.http.status) < 400 { "success" } else { "failure" } 
  }
   
  if .suricata.eve.http.http_port != null { 
      .suricata.eve.http.http_port = to_int!(.suricata.eve.http.http_port)
  }

  if .network.protocol == "dns" {
    .dns.id = if .suricata.eve.dns.id != null { to_string!(.suricata.eve.dns.id) }
    .dns.response_code = .suricata.eve.dns.rcode
    .dns.type = .suricata.eve.dns.type
    if .dns.type == "query" || .suricata.eve.dns.version == 2 {
      .dns.question.name = .suricata.eve.dns.rrname
      .dns.question.type = .suricata.eve.dns.rrtype
    }

    .dns.resolved_ip = []

    if .dns.type == "answer" {
      if .suricata.eve.dns.version == 2 { # v2
        .dns.answers = .suricata.eve.dns.answers
        if .dns.answers != null {
          .dns.answers = map_values(array!(.dns.answers)) -> |v| {
            v.name = del(v.rrname)
            v.type = del(v.rrtype)
            v.data = del(v.rdata)
            if v.type == "A" || v.type == "AAAA" {
              .dns.resolved_ip = push(.dns.resolved_ip, v.data)
            }
            v
          }
        }
      } else { # v1
        answer = compact({
          "name": .suricata.eve.dns.rrname,
          "data": .suricata.eve.dns.rdata,
          "type": .suricata.eve.dns.rrtype,
          "ttl": .suricata.eve.dns.ttl,
        })
        if !is_empty(answer) {
          .dns.answers = [answer]
        }
        if answer.type == "A" || answer.type == "AAAA" {
          .dns.resolved_ip = [answer.data]
        }
      }
    }

    .related.ip = flatten([.related.ip, .dns.resolved_ip])

    if .dns.question.registered_domain != null {
      dot_idx = find!(.dns.question.registered_domain, ".")
      if dot_idx != -1 {
        .dns.question.top_level_domain = slice!(.dns.question.registered_domain, dot_idx + 1)
      }
    }

    .dns.header_flags = []
    if .suricata.eve.dns.aa == true {
      .dns.header_flags = push(.dns.header_flags, "AA")
    }
    if .suricata.eve.dns.tc == true {
      .dns.header_flags = push(.dns.header_flags, "TC")
    }
    if .suricata.eve.dns.rd == true {
      .dns.header_flags = push(.dns.header_flags, "RD")
    }
    if .suricata.eve.dns.ra == true {
      .dns.header_flags = push(.dns.header_flags, "RA")
    }

    del(.suricata.eve.dns.aa)
    del(.suricata.eve.dns.tc)
    del(.suricata.eve.dns.rd)
    del(.suricata.eve.dns.ra)
    del(.suricata.eve.dns.qr)
    del(.suricata.eve.dns.answers)
    del(.suricata.eve.dns.version)
    del(.suricata.eve.dns.flags)
    del(.suricata.eve.dns.grouped)
  } else if .network.protocol == "tls" {
    if .suricata.eve.tls.version != "UNDETERMINED" {
      parts = split!(.suricata.eve.tls.version, " ", 2)
      .tls.version_protocol = downcase!(parts[0])
      .tls.version = parts[1]
    }
    if .suricata.eve.tls.sni != null && ends_with!(.suricata.eve.tls.sni, ".") {
      .suricata.eve.tls.sni = slice!(.suricata.eve.tls.sni, 0, -1)
    }

    .tls.server.subject = .suricata.eve.tls.subject
    .suricata.eve.tls.subject = replace(.suricata.eve.tls.subject, r'\\,', "") ?? null

    subject_kv = parse_key_value(.suricata.eve.tls.subject, "=", ", ") ?? {}
    .tls.server.x509.subject.country = subject_kv.C
    .tls.server.x509.subject.organization = subject_kv.O
    .tls.server.x509.subject.organizational_unit = subject_kv.OU
    .tls.server.x509.subject.common_name = subject_kv.CN
    .tls.server.x509.subject.locality = subject_kv.L
    .tls.server.x509.subject.state_or_province = subject_kv.ST
    
    .tls.server.issuer = .suricata.eve.tls.issuerdn
    .suricata.eve.tls.issuerdn = replace(.suricata.eve.tls.issuerdn, r'\\,', "") ?? null
    issuer_kv = parse_key_value(.suricata.eve.tls.issuerdn, "=", ", ") ?? {}
    .tls.server.x509.issuer.country = issuer_kv.C
    .tls.server.x509.issuer.organization = issuer_kv.O
    .tls.server.x509.issuer.organizational_unit = issuer_kv.OU
    .tls.server.x509.issuer.common_name = issuer_kv.CN
    .tls.server.x509.issuer.locality = issuer_kv.L
    .tls.server.x509.issuer.state_or_province = issuer_kv.ST

    .tls.server.x509.subject = map_values(compact(.tls.server.x509.subject)) -> |v| { [v] }
    .tls.server.x509.issuer = map_values(compact(.tls.server.x509.issuer)) -> |v| { [v] }

    .tls.resumed = if .suricata.eve.tls.session_resumed != null { to_bool!(.suricata.eve.tls.session_resumed) }
    .tls.server.hash.sha1 = .suricata.eve.tls.fingerprint
    if .tls.server.hash.sha1 != null {
      .tls.server.hash.sha1 = upcase!(.tls.server.hash.sha1)
      .tls.server.hash.sha1 = replace(.tls.server.hash.sha1, ":", "")
      .related.hash = push(.related.hash, .tls.server.hash.sha1)
    }

    .tls.client.server_name = .suricata.eve.tls.sni
    if !is_nullish(.suricata.eve.tls.sni) {
      .destination.domain = [.suricata.eve.tls.sni]
      .related.hosts = push(.related.hosts, .suricata.eve.tls.sni)
    }

    .tls.server.ja3s = .suricata.eve.tls.ja3s.hash
    .tls.client.ja3 = .suricata.eve.tls.ja3.hash
    .tls.server.certificate = .suricata.eve.tls.certificate
    .tls.server.certificate_chain = .suricata.eve.tls.chain
    .tls.server.x509.serial_number = .suricata.eve.tls.serial
    .tls.server.x509.serial_number = replace(.tls.server.x509.serial_number, ":", "") ?? null
    
    if .suricata.eve.tls.notafter != null {
      ts = string!(.suricata.eve.tls.notafter)
      if contains(slice!(ts, length(ts) - 6), "+") {
        ts = split(ts, "+")
        ts = join!([ts[0], "+", slice!(ts[1], 0,2), ":", slice!(ts[1], 2)])
      } else if contains(slice!(ts, length(ts) - 6), "-") {
        ts_suff = split(slice!(ts, length(ts) - 6), "-")
        ts = slice!(ts, 0, length(ts) - 6) + join!([ts_suff[0], "-", slice!(ts_suff[1], 0,2), ":", slice!(ts_suff[1], 2)])
      } else {
        ts = ts + "Z"
      }

      .tls.server.not_after = to_timestamp!(ts)
      .suricata.eve.tls.notafter = .tls.server.not_after
      .tls.server.x509.not_after = .tls.server.not_after
    }
    if .suricata.eve.tls.notbefore != null {
      ts = string!(.suricata.eve.tls.notbefore)
      if contains(slice!(ts, length(ts) - 6), "+") {
        ts = split(ts, "+")
        ts = join!([ts[0], "+", slice!(ts[1], 0,2), ":", slice!(ts[1], 2)])
      } else if contains(slice!(ts, length(ts) - 6), "-") {
        ts_suff = split(slice!(ts, length(ts) - 6), "-")
        ts = slice!(ts, 0, length(ts) - 6) + join!([ts_suff[0], "-", slice!(ts_suff[1], 0,2), ":", slice!(ts_suff[1], 2)])
      } else {
        ts = ts + "Z"
      }

      .tls.server.not_before = to_timestamp!(ts)
      .suricata.eve.tls.notbefore = .tls.server.not_before
      .tls.server.x509.not_before = .tls.server.not_before
    }
  }

  if .suricata.eve.flow.state == "new" { 
      .event.type = push(.event.type, "start") 
  } else if .suricata.eve.flow.state == "closed" { 
      .event.type = push(.event.type, "end") 
  }

  .http.request.method = .suricata.eve.http.http_method
  .http.response.status_code = del(.suricata.eve.http.status)

  if .suricata.eve.http.hostname != null { 
      .destination.domain = push(.destination.domain, .suricata.eve.http.hostname) 
  }
      
  del(.suricata.eve.http.hostname)
       
  if .network.protocol == "http" { 
      .url.domain = .destination.domain[0]
  }
  .destination.domain = join(.destination.domain, ",") ?? null
                                                 
  parsed, err = parse_url(.suricata.eve.http.url)
  if err == null {
      .url = object!(.url)                                                        
      .url |= parsed

      if .url.query != null {
          query = []
          for_each(object!(.url.query)) -> |k, v| {
              v = if v != "" { k + "=" + v } else { k }
              query = push(query, v)
          }
          query = join(query, "&") ?? null
          .url.query = query
      }

      del(.url.scheme)
      del(.url.host)
  }                                                                         

  .url.original = del(.suricata.eve.http.url)
  .url.path = .url.path || .url.original

  .http.request.referrer = del(.suricata.eve.http.http_refer)

  .http.response.body.bytes = del(.suricata.eve.http.length)

  .file.path = del(.suricata.eve.fileinfo.filename)

  .file.size = del(.suricata.eve.fileinfo.size)

  .network.transport = downcase(.network.transport) ?? null                  

  .message = if .suricata.eve.alert.category != null { to_string!(.suricata.eve.alert.category) }

  .rule.category = .suricata.eve.alert.category

  .rule.id = if .suricata.eve.alert.signature_id != null { to_string!(.suricata.eve.alert.signature_id) }

  .rule.name = .suricata.eve.alert.signature

  if .suricata.eve.alert.action == "blocked" { 
      .suricata.eve.alert.action = "denied"
  }

  if .suricata.eve.alert.action != null { 
      .event.type = push(.event.type, .suricata.eve.alert.action)
      del(.suricata.eve.alert.action) 
  }

  .event.severity = del(.suricata.eve.alert.severity)

  .suricata.eve.alert.protocols = del(.suricata.eve.alert.metadata.protocols)

  .suricata.eve.alert.attack_target = del(.suricata.eve.alert.metadata.attack_target)

  .suricata.eve.alert.capec_id = del(.suricata.eve.alert.metadata.capec_id)

  .suricata.eve.alert.cwe_id = del(.suricata.eve.alert.metadata.cwe_id)

  .suricata.eve.alert.malware = del(.suricata.eve.alert.metadata.malware)

  .suricata.eve.alert.cve = del(.suricata.eve.alert.metadata.cve)

  .suricata.eve.alert.cvss_v2_base = del(.suricata.eve.alert.metadata.cvss_v2_base)

  .suricata.eve.alert.cvss_v2_temporal = del(.suricata.eve.alert.metadata.cvss_v2_temporal)

  .suricata.eve.alert.cvss_v3_base = del(.suricata.eve.alert.metadata.cvss_v3_base)

  .suricata.eve.alert.cvss_v3_temporal = del(.suricata.eve.alert.metadata.cvss_v3_temporal)

  .suricata.eve.alert.priority = del(.suricata.eve.alert.metadata.priority)

  .suricata.eve.alert.hostile = del(.suricata.eve.alert.metadata.hostile)

  .suricata.eve.alert.infected = del(.suricata.eve.alert.metadata.infected)

  created_at = del(.suricata.eve.alert.metadata.created_at)
  if created_at != null { 
    created_at, err = replace(array!(created_at)[0], "_", "-") + "T00:00:00Z"
    .suricata.eve.alert.created_at = to_timestamp!(created_at)                 
  }

  updated_at = del(.suricata.eve.alert.metadata.updated_at)
  if updated_at != null { 
    updated_at, err = replace(array!(updated_at)[0], "_", "-") + "T00:00:00Z"
    .suricata.eve.alert.updated_at = to_timestamp!(updated_at)                 
  }

  .file.name = del(.suricata.eve.alert.metadata.filename)
  if .file.name != null { 
      .file.name = join!(.file.name, ", ")
  }

  .suricata.eve.alert.classtype = del(.suricata.eve.alert.metadata.classtype)

  .suricata.eve.alert.rule_source = del(.suricata.eve.alert.metadata.rule_source)

  .suricata.eve.alert.sid = del(.suricata.eve.alert.metadata.sid)

  .threat.tactic.id = del(.suricata.eve.alert.metadata.mitre_attack)

  if .threat.tactic.id == null { 
      .threat.tactic.id = del(.suricata.eve.alert.metadata.mitre_tactic_id) || .threat.tactic.id
  }

  .threat.tactic.name = del(.suricata.eve.alert.metadata.mitre_tactic_name)

  .threat.technique.id = del(.suricata.eve.alert.metadata.mitre_technique_id)

  .threat.technique.name = del(.suricata.eve.alert.metadata.mitre_technique_id)

  .destination.packets = del(.suricata.eve.flow.pkts_toclient)

  .source.packets = del(.suricata.eve.flow.pkts_toserver)

  .destination.bytes = del(.suricata.eve.flow.bytes_toclient)

  .source.bytes = del(.suricata.eve.flow.bytes_toserver)

  src_pkts = int!(.source.packets || 0)
  src_bytes = int!(.source.bytes || 0)
  dst_pkts = int!(.destination.packets || 0)
  dst_bytes = int!(.destination.bytes || 0)
  if src_bytes + dst_bytes > 0 {
    .network.bytes =  src_bytes + dst_bytes
  }
  if src_pkts + dst_pkts > 0 {
    .network.packets = src_pkts + dst_pkts
  }                   

  start_epoch_ns = null
  if .suricata.eve.flow.start != null {
    ts = string!(.suricata.eve.flow.start)
    if contains(slice!(ts, length(ts) - 6), "+") {
      ts = split(ts, "+")
      ts = join!([ts[0], "+", slice!(ts[1], 0,2), ":", slice!(ts[1], 2)])
    } else if contains(slice!(ts, length(ts) - 6), "-") {
      ts_suff = split(slice!(ts, length(ts) - 6), "-")
      ts = slice!(ts, 0, length(ts) - 6) + join!([ts_suff[0], "-", slice!(ts_suff[1], 0,2), ":", slice!(ts_suff[1], 2)])
    } else {
      ts = ts + "Z"
    }

    .event.start = to_timestamp!(ts)
    start_epoch_ns = to_unix_timestamp(.event.start, unit: "nanoseconds")
  }

  end_epoch_ns = null
  if .suricata.eve.flow.end != null {
    ts = string!(.suricata.eve.flow.end)
    if contains(slice!(ts, length(ts) - 6), "+") {
      ts = split(ts, "+")
      ts = join!([ts[0], "+", slice!(ts[1], 0,2), ":", slice!(ts[1], 2)])
    } else if contains(slice!(ts, length(ts) - 6), "-") {
      ts_suff = split(slice!(ts, length(ts) - 6), "-")
      ts = slice!(ts, 0, length(ts) - 6) + join!([ts_suff[0], "-", slice!(ts_suff[1], 0,2), ":", slice!(ts_suff[1], 2)])
    } else {
      ts = ts + "Z"
    }

    .event.end = to_timestamp!(ts)
    end_epoch_ns = to_unix_timestamp(.event.end, unit: "nanoseconds")
  }

  if start_epoch_ns != null && end_epoch_ns != null {
    .event.duration = int!(end_epoch_ns) - int!(start_epoch_ns)
  }

  # TODO(): user agent
  # .user_agent = parse_user_agent!(del(.suricata.eve.http.http_user_agent))

  .source.as.number = del(.source.as.asn)
  .source.as.organization.name = del(.source.as.organization_name)
  .destination.as.number = del(.destination.as.asn)
  .destination.as.organization.name = del(.destination.as.organization_name)

  if .url.domain != null && .url.domain != "" { 
      .related.hosts = push(.related.hosts, .url.domain) 
  }
      
  if .source.ip != null { 
      .related.ip = push(.related.ip, .source.ip) 
  }

  if .destination.ip != null { 
      .related.ip = push(.related.ip, .destination.ip) 
  }

  if .tls.server.ja3s != null { 
      .related.hash = push(.related.hash, .tls.server.ja3s) 
  }
      
  if .tls.client.ja3 != null { 
      .related.hash = push(.related.hash, .tls.client.ja3) 
  }
   
  if .suricata.eve.alert.metadata == null || is_empty!(.suricata.eve.alert.metadata) { 
      del(.suricata.eve.alert.metadata)
  } else {
    .suricata.eve.alert.metadata = encode_json(.suricata.eve.alert.metadata)
  }

  .related.ip = unique(.related.ip)

  del(.suricata.eve.app_proto)
  del(.suricata.eve.flow.end)
  del(.suricata.eve.flow.start)
  del(.suricata.eve.http.http_method)
  del(.suricata.eve.http.http_user_agent)
  del(.suricata.eve.timestamp)
  del(.suricata.eve.src_port)
  del(.suricata.eve.dest_port)
  del(.dns.question.domain)
schema:
  ecs_field_names:
  - cloud.account.id
  - cloud.availability_zone
  - cloud.instance.id
  - cloud.instance.name
  - cloud.machine.type
  - cloud.project.id
  - cloud.provider
  - cloud.region
  - container.id
  - container.image.name
  - container.labels
  - container.name
  - destination.address
  - destination.as.number
  - destination.as.organization.name
  - destination.bytes
  - destination.domain
  - destination.geo.city_name
  - destination.geo.continent_name
  - destination.geo.country_iso_code
  - destination.geo.country_name
  - destination.geo.location
  - destination.geo.region_iso_code
  - destination.geo.region_name
  - destination.ip
  - destination.mac
  - destination.packets
  - destination.port
  - dns.answers.class
  - dns.answers.data
  - dns.answers.name
  - dns.answers.ttl
  - dns.answers.type
  - dns.header_flags
  - dns.id
  - dns.op_code
  - dns.question.class
  - dns.question.name
  - dns.question.registered_domain
  - dns.question.subdomain
  - dns.question.top_level_domain
  - dns.question.type
  - dns.resolved_ip
  - dns.response_code
  - dns.type
  - ecs.version
  - event.category
  - event.created
  - event.dataset
  - event.duration
  - event.end
  - event.ingested
  - event.kind
  - event.module
  - event.original
  - event.outcome
  - event.severity
  - event.start
  - event.type
  - file.name
  - file.path
  - file.size
  - host.architecture
  - host.domain
  - host.hostname
  - host.id
  - host.mac
  - host.name
  - host.os.family
  - host.os.kernel
  - host.os.name
  - host.os.platform
  - host.os.version
  - host.type
  - http.request.method
  - http.request.referrer
  - http.response.body.bytes
  - http.response.status_code
  - log.file.path
  - message
  - network.bytes
  - network.community_id
  - network.packets
  - network.protocol
  - network.transport
  - related.hash
  - related.hosts
  - related.ip
  - rule.category
  - rule.id
  - rule.name
  - source.address
  - source.as.number
  - source.as.organization.name
  - source.bytes
  - source.geo.city_name
  - source.geo.continent_name
  - source.geo.country_iso_code
  - source.geo.country_name
  - source.geo.location
  - source.geo.region_iso_code
  - source.geo.region_name
  - source.ip
  - source.mac
  - source.packets
  - source.port
  - tags
  - threat.framework
  - threat.tactic.id
  - threat.tactic.name
  - threat.technique.id
  - threat.technique.name
  - tls.client.ja3
  - tls.client.server_name
  - tls.resumed
  - tls.server.hash.sha1
  - tls.server.issuer
  - tls.server.ja3s
  - tls.server.not_after
  - tls.server.not_before
  - tls.server.subject
  - tls.server.x509.issuer.common_name
  - tls.server.x509.issuer.country
  - tls.server.x509.issuer.locality
  - tls.server.x509.issuer.organization
  - tls.server.x509.issuer.organizational_unit
  - tls.server.x509.issuer.state_or_province
  - tls.server.x509.not_after
  - tls.server.x509.not_before
  - tls.server.x509.serial_number
  - tls.server.x509.subject.common_name
  - tls.server.x509.subject.country
  - tls.server.x509.subject.locality
  - tls.server.x509.subject.organization
  - tls.server.x509.subject.organizational_unit
  - tls.server.x509.subject.state_or_province
  - tls.version
  - tls.version_protocol
  - url.domain
  - url.original
  - url.path
  - url.query
  - user_agent.device.name
  - user_agent.name
  - user_agent.original
  - user_agent.os.full
  - user_agent.os.name
  - user_agent.os.version
  - user_agent.version
  fields:
  - name: suricata
    type:
      type: struct
      fields:
      - name: eve
        type:
          type: struct
          fields:
          - name: alert
            type:
              type: struct
              fields:
              - name: affected_product
                type:
                  element: string
                  type: list
              - name: attack_target
                type:
                  element: string
                  type: list
              - name: capec_id
                type:
                  element: string
                  type: list
              - name: category
                type: string
              - name: classtype
                type:
                  element: string
                  type: list
              - name: created_at
                type: timestamp
              - name: cve
                type:
                  element: string
                  type: list
              - name: cvss_v2_base
                type:
                  element: string
                  type: list
              - name: cvss_v2_temporal
                type:
                  element: string
                  type: list
              - name: cvss_v3_base
                type:
                  element: string
                  type: list
              - name: cvss_v3_temporal
                type:
                  element: string
                  type: list
              - name: cwe_id
                type:
                  element: string
                  type: list
              - name: deployment
                type:
                  element: string
                  type: list
              - name: former_category
                type:
                  element: string
                  type: list
              - name: gid
                type: long
              - name: hostile
                type:
                  element: string
                  type: list
              - name: infected
                type:
                  element: string
                  type: list
              - name: malware
                type:
                  element: string
                  type: list
              - name: metadata
                type: string
              - name: mitre_tool_id
                type:
                  element: string
                  type: list
              - name: performance_impact
                type:
                  element: string
                  type: list
              - name: priority
                type:
                  element: string
                  type: list
              - name: protocols
                type:
                  element: string
                  type: list
              - name: rev
                type: long
              - name: rule_source
                type:
                  element: string
                  type: list
              - name: sid
                type:
                  element: string
                  type: list
              - name: signature
                type: string
              - name: signature_id
                type: long
              - name: signature_severity
                type: string
              - name: tag
                type:
                  element: string
                  type: list
              - name: updated_at
                type: timestamp
          - name: app_proto_expected
            type: string
          - name: app_proto_orig
            type: string
          - name: app_proto_tc
            type: string
          - name: app_proto_ts
            type: string
          - name: dns
            type:
              type: struct
              fields:
              - name: id
                type: long
              - name: rcode
                type: string
              - name: rdata
                type: string
              - name: rrname
                type: string
              - name: rrtype
                type: string
              - name: ttl
                type: long
              - name: tx_id
                type: long
              - name: type
                type: string
          - name: email
            type:
              type: struct
              fields:
              - name: status
                type: string
          - name: event_type
            type: string
          - name: fileinfo
            type:
              type: struct
              fields:
              - name: gaps
                type: boolean
              - name: md5
                type: string
              - name: sha1
                type: string
              - name: sha256
                type: string
              - name: state
                type: string
              - name: stored
                type: boolean
              - name: tx_id
                type: long
          - name: flow
            type:
              type: struct
              fields:
              - name: age
                type: long
              - name: alerted
                type: boolean
              - name: end
                type: timestamp
              - name: reason
                type: string
              - name: state
                type: string
          - name: flow_id
            type: string
          - name: http
            type:
              type: struct
              fields:
              - name: http_content_type
                type: string
              - name: http_port
                type: long
              - name: protocol
                type: string
              - name: redirect
                type: string
          - name: icmp_code
            type: long
          - name: icmp_type
            type: long
          - name: in_iface
            type: string
          - name: pcap_cnt
            type: long
          - name: smtp
            type:
              type: struct
              fields:
              - name: helo
                type: string
              - name: mail_from
                type: string
              - name: rcpt_to
                type: string
          - name: ssh
            type:
              type: struct
              fields:
              - name: client
                type:
                  type: struct
                  fields:
                  - name: proto_version
                    type: string
                  - name: software_version
                    type: string
              - name: server
                type:
                  type: struct
                  fields:
                  - name: proto_version
                    type: string
                  - name: software_version
                    type: string
          - name: stats
            type:
              type: struct
              fields:
              - name: app_layer
                type:
                  type: struct
                  fields:
                  - name: flow
                    type:
                      type: struct
                      fields:
                      - name: dcerpc_tcp
                        type: long
                      - name: dcerpc_udp
                        type: long
                      - name: dns_tcp
                        type: long
                      - name: dns_udp
                        type: long
                      - name: failed_tcp
                        type: long
                      - name: failed_udp
                        type: long
                      - name: ftp
                        type: long
                      - name: http
                        type: long
                      - name: imap
                        type: long
                      - name: msn
                        type: long
                      - name: smb
                        type: long
                      - name: smtp
                        type: long
                      - name: ssh
                        type: long
                      - name: tls
                        type: long
                  - name: tx
                    type:
                      type: struct
                      fields:
                      - name: dcerpc_tcp
                        type: long
                      - name: dcerpc_udp
                        type: long
                      - name: dns_tcp
                        type: long
                      - name: dns_udp
                        type: long
                      - name: ftp
                        type: long
                      - name: http
                        type: long
                      - name: smb
                        type: long
                      - name: smtp
                        type: long
                      - name: ssh
                        type: long
                      - name: tls
                        type: long
              - name: capture
                type:
                  type: struct
                  fields:
                  - name: kernel_drops
                    type: long
                  - name: kernel_ifdrops
                    type: long
                  - name: kernel_packets
                    type: long
              - name: decoder
                type:
                  type: struct
                  fields:
                  - name: avg_pkt_size
                    type: long
                  - name: bytes
                    type: long
                  - name: dce
                    type:
                      type: struct
                      fields:
                      - name: pkt_too_small
                        type: long
                  - name: erspan
                    type: long
                  - name: ethernet
                    type: long
                  - name: gre
                    type: long
                  - name: icmpv4
                    type: long
                  - name: icmpv6
                    type: long
                  - name: ieee8021ah
                    type: long
                  - name: invalid
                    type: long
                  - name: ipraw
                    type:
                      type: struct
                      fields:
                      - name: invalid_ip_version
                        type: long
                  - name: ipv4
                    type: long
                  - name: ipv4_in_ipv6
                    type: long
                  - name: ipv6
                    type: long
                  - name: ipv6_in_ipv6
                    type: long
                  - name: ltnull
                    type:
                      type: struct
                      fields:
                      - name: pkt_too_small
                        type: long
                      - name: unsupported_type
                        type: long
                  - name: max_pkt_size
                    type: long
                  - name: mpls
                    type: long
                  - name: 'null'
                    type: long
                  - name: pkts
                    type: long
                  - name: ppp
                    type: long
                  - name: pppoe
                    type: long
                  - name: raw
                    type: long
                  - name: sctp
                    type: long
                  - name: sll
                    type: long
                  - name: tcp
                    type: long
                  - name: teredo
                    type: long
                  - name: udp
                    type: long
                  - name: vlan
                    type: long
                  - name: vlan_qinq
                    type: long
              - name: defrag
                type:
                  type: struct
                  fields:
                  - name: ipv4
                    type:
                      type: struct
                      fields:
                      - name: fragments
                        type: long
                      - name: reassembled
                        type: long
                      - name: timeouts
                        type: long
                  - name: ipv6
                    type:
                      type: struct
                      fields:
                      - name: fragments
                        type: long
                      - name: reassembled
                        type: long
                      - name: timeouts
                        type: long
                  - name: max_frag_hits
                    type: long
              - name: detect
                type:
                  type: struct
                  fields:
                  - name: alert
                    type: long
              - name: dns
                type:
                  type: struct
                  fields:
                  - name: memcap_global
                    type: long
                  - name: memcap_state
                    type: long
                  - name: memuse
                    type: long
              - name: file_store
                type:
                  type: struct
                  fields:
                  - name: open_files
                    type: long
              - name: flow
                type:
                  type: struct
                  fields:
                  - name: emerg_mode_entered
                    type: long
                  - name: emerg_mode_over
                    type: long
                  - name: icmpv4
                    type: long
                  - name: icmpv6
                    type: long
                  - name: memcap
                    type: long
                  - name: memuse
                    type: long
                  - name: spare
                    type: long
                  - name: tcp
                    type: long
                  - name: tcp_reuse
                    type: long
                  - name: udp
                    type: long
              - name: flow_mgr
                type:
                  type: struct
                  fields:
                  - name: bypassed_pruned
                    type: long
                  - name: closed_pruned
                    type: long
                  - name: est_pruned
                    type: long
                  - name: flows_checked
                    type: long
                  - name: flows_notimeout
                    type: long
                  - name: flows_removed
                    type: long
                  - name: flows_timeout
                    type: long
                  - name: flows_timeout_inuse
                    type: long
                  - name: new_pruned
                    type: long
                  - name: rows_busy
                    type: long
                  - name: rows_checked
                    type: long
                  - name: rows_empty
                    type: long
                  - name: rows_maxlen
                    type: long
                  - name: rows_skipped
                    type: long
              - name: http
                type:
                  type: struct
                  fields:
                  - name: memcap
                    type: long
                  - name: memuse
                    type: long
              - name: tcp
                type:
                  type: struct
                  fields:
                  - name: insert_data_normal_fail
                    type: long
                  - name: insert_data_overlap_fail
                    type: long
                  - name: insert_list_fail
                    type: long
                  - name: invalid_checksum
                    type: long
                  - name: memuse
                    type: long
                  - name: no_flow
                    type: long
                  - name: overlap
                    type: long
                  - name: overlap_diff_data
                    type: long
                  - name: pseudo
                    type: long
                  - name: pseudo_failed
                    type: long
                  - name: reassembly_gap
                    type: long
                  - name: reassembly_memuse
                    type: long
                  - name: rst
                    type: long
                  - name: segment_memcap_drop
                    type: long
                  - name: sessions
                    type: long
                  - name: ssn_memcap_drop
                    type: long
                  - name: stream_depth_reached
                    type: long
                  - name: syn
                    type: long
                  - name: synack
                    type: long
              - name: uptime
                type: long
          - name: tcp
            type:
              type: struct
              fields:
              - name: ack
                type: boolean
              - name: fin
                type: boolean
              - name: psh
                type: boolean
              - name: rst
                type: boolean
              - name: state
                type: string
              - name: syn
                type: boolean
              - name: tcp_flags
                type: string
              - name: tcp_flags_tc
                type: string
              - name: tcp_flags_ts
                type: string
          - name: tls
            type:
              type: struct
              fields:
              - name: fingerprint
                type: string
              - name: issuerdn
                type: string
              - name: ja3
                type:
                  type: struct
                  fields:
                  - name: hash
                    type: string
                  - name: string
                    type: string
              - name: ja3s
                type:
                  type: struct
                  fields:
                  - name: hash
                    type: string
                  - name: string
                    type: string
              - name: notafter
                type: timestamp
              - name: notbefore
                type: timestamp
              - name: serial
                type: string
              - name: session_resumed
                type: boolean
              - name: sni
                type: string
              - name: subject
                type: string
              - name: version
                type: string
          - name: tx_id
            type: long
